TODO:
    1. Öncelikle Uygulamanın Nasıl Çalıştığıyla Alakalı Bilgilendirme... - [✅] Done /  [❎] Failure
    2. Uygulamadaki kodların açıklamalarını comment olarak eklenmesi... (Detaylı,ortalama 2 cümlelik açıklama beklenmektedir.)
    3. Eklenmesi istenen özelliklerin kısa 1-2 cümleyle açıklanması...



TODO CEVAPLAR:
    1. Uygulama...
    3. Özellikler...

1-) 
    1. Uygulama çalıştığı vakit ilk olarak bleManagerRun() fonksiyonu çalışacak ve çevredeki cihazlara
    bakıcak; ✅
        - Eğer POI isimli cihaz yoksa "Kapsam dışındasınız uyarısı verilecek". ✅
        - Eğer POI isimli cihaz yada cihazlar varsa "rssi" değeri en düşük olan POI cihazına ait
        "major" ve "minor" değerleri bizim mevcut konumumuzu belirtmektedir. 
    Bu aşamada kullanıcı hiçbir etkileşimde bulunmayacak uygulama çalışır çalışmaz bu işlem otomatik
    yapılacak ve mevcut konum bilgisi geçici bir memoryde sürekli tutulacaktır.  
    [setCurMajor,setCurMinor,setPOI]

    2. Kullanıcıdan select menüden gideceği yeri seçmesi istenilecek. setSelected olunduğu takdirde
    setSelected olunan optiona ait veriler alınacaktır. Bu veriler o konuma ait major ve minor değerleridir.
    Alınan "varış yeri" koordinatları yani seçilen yere ait olan major ve minor değerleride geçici bir
    memoryde tutulacak. 
    [setOptionsMajorValue,setOptionsMinorValue]

    3. Daha sonra kullanıcının bulunduğu yere ait olan major ve minor değerleri ve varacağı yere ait olan 
    major ve minor değerleri ele alınıp veri tabanınındaki mainRoutes tablosuna bir sorgu gönderilir.
    Bu sorgu: SELECT mainroutes.id FROM mainRoutes 
            WHERE startMajor = {setCurMajor}, startMinor = {setCurMinor},
            finishMajor = {setOptionsMajorValue} , finishMinor = {setOptionsMinorValue}
    Buradan döndürülen sorgu sonucunda bize bir mainRouteId döndürülmüş olucak örneğin "1".

    4. Daha sonra mainRouteId ile ilişkili olan routes tablosundaki değeler
    {
        curMajor,curMinor,nextMajor,nextDirection,nextDistance,beforeMajor,
        beforeDirection,beforeDistance
    } 
    sorgu yardımı ile bize döndürülmüş olacak. Bu aşamada şunlar kontrol edilecektir;
        - Zaten hali hazırda sürekli tutulan (setCurMajor ve setCurMinor), bulunduğumuz yerin konumu (major ve minor)
        sorgu sonucu dönen sonuçlardaki curMajor ve curMinor değeleri ile karşılaştırılacaktır.
        - Bu karşılaştırmanın neticesinde bize dönen veri setlerinden bulunduğumuz yerin konumunu içeren
        veri seti esas alınacaktır.
                Örneğin;
                
                // Bulunduğumuz yerin anlık verisi "routes" tablosundaki eşleşen bulunulan yer verileriyle aynıysa;
                // Aşağıdaki önermeleri yap ve devam et.
                     WHILE( {setCurMajor,setCurMinor} === {curMajor , curMinor}){
                            
                            * Sıradaki konumun direction iconunu ekrana yansıt.(nextDirection)
                            * Sıradaki konumun mesafesini ekrana yansıt.(nextDistance)
                            
                            continue

                // Bulunduğumuz yerin anlık verisi veri tabanından bize gelen sorguların curMajor ve curMinor
                // değerlerinin hiçbiri ile eşleşmiyorsa tüm bu işlemleri yapacak olan metodu baştan çağır

                // Bulunduğumuz yerin anlık verisi "mainRoutes" tablosundaki bitiş noktalarıyla aynıysa;
                // Aşağıdaki önermeyi yap ve döngüyü sonlandır. 
                            IF({setCurMajor,setCurMinor} === {finishMajor , finishMinor}){
                                * Varış noktasına geldiniz yazdır. 
                            }
                            
                            break 
                        
                            }
                    


 

TODO-2:
[ ] Uygulama açıldığında başlangıç konumu için beacon ara. Başlangıç konumu için beacon bulunana kadar aramaya devam et.
[ ] Yol tarifi getir butonuna tıklandığında bitiş noktası belirlendi mi kontrol et. Belirlenmediyse uyarı ver ve belirlenmesini sağla.
[ ] Veritabanından başlangıç ve bitiş noktasına göre yolu al gel. Yol bulunamazsa uyarı ver.
[ ] App js deki beacon arama olayını bir şekilde gir,iş ekranına taşı





Yapacakların: 
    1- Redux Toolkit ile ilgili bir video izle.
    2- useState, useEffect, useRef ve useCallback hakkında beta.reactjs.org sitesindeki dokümanları oku.
    3- Componentleri olabildiğince küçük parçalara ayır. Bu ayırmaları 30 satır kod olarak sınırlıyoruz. Mümkün olduğunca bu sınırı aşma. ( Style dışında )
    4- Db yi bırak. Localde tut bu verileri. Oradan gelen sorguyla ilgili işlemleri yap.
    5- App js içerisindeki, beacon arama fonksiyonunu tek bir fonksiyon içerisinde yap. Bu fonksiyonu bir component içerisinde çağır.

    Yönlendirme için yapılacaklar Algoritma:
    1-) (startValues) İlk algılanan minRssiDevice.major ===  mainRoutes.startMajor and  minRssiDevice.minor ===  mainRoutes.startMinor (useEffectin başında yapabiliriz.)
    2-) (finishValues) Daha sonra selected.major and selected.minor tutulacak.  
    3-) Daha sonra sorgu yapılacak (startValues.major === mainRoutes.major and startValues.minor === mainRoutes.minor ) and (startValues.major === mainRoutes.major and startValues.minor === mainRoutes.minor )
    olan mainRouteId ile ilişkili routes verileri gelicek. 
    if(minRssiDevice.major and minRssiDevice.minor == routes.curMajor and routes){
        selectedArrow === routes.nextDirection 
        selectedText === routes.nextText
        
        if(minRssiDevice.major and minRssiDevice.minor == mainRoutes.finishMajor and mainRoutes.finishMinor){
            selectedText === "Tebrikler Hedefinize Vardınız"
            backgroundColor === Green
            arrowName === single-dot
        }
    }else{
        selectedText === "Lütfen Kapsam Alanı İçerisine Giriniz veya Yeni bir varış yeri seçiniz"
        backgroundColor === Red 
        arrowName === close
    }

    Yapılacaklar Listesi;
    if(!no userfound){
        
    }else{
        arrowName === "close",
        backgroundColor === "red",
        text === "lütfen kapsam alanı içine giriniz"
    }

    // döngü ile curMajor değerlerini karşılaştırma
data.forEach((datas) => {
  minRssiDevice.forEach((device) => {
    if (datas.curMajor === device.major && datas.curMinor === device.minor) {
      text === datas.nextText,
      arrowName ==== datas.nextDirection,
      backgroundColor === blue 

    }
  });
});



elde etmemiz gereken propslar ;

arrowlar === (circle.js)
text === (seletMenu.js)
styles.backgroundColor === sadce app.js de olabilir tüm componentleride ilgilendirebilir.

Octicons

[BleError: Cannot start scanning operation] 0 eğer bu hata alınırsa bluetoothu yeniden açıp kapatın diye uyarı verdir.

---------------------- BUTON DURDUR RESTART İŞLEMİ YAPILACAKLAR -------------------------------------------------
1-) İlk olarak button.js de onPresse if else eklenecek 
if(eğer rota seçili değilse)  {
          *  rota oluştur yazacak 
          *  GlobalContext.handleButtonPress() çalışacak 
} 
else if(eğer rota seçiliyse)  {
        *  butonun arkaplan rengi kırmızı olsun 
        *  butonun yazı rengi beyaz olsun 
        *  GlobalContext.stopPress() çalışacak 
}


normal web service gibi get post modülü yaz sensörden post isteği atılacak. apiden aynı zamanda bide get alacaz.
